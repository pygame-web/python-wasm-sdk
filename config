#!/bin/bash
if [[ -z ${CONFIG_ENV+z} ]]
then
export CONFIG_ENV=true
export LC_ALL=C
export ROOT=${ROOT:-$(pwd)}
export SDKROOT=${SDKROOT:-$ROOT}
[ -f $SDKROOT/versions ] && source $SDKROOT/versions
export PYTHONDONTWRITEBYTECODE=1
export REBUILD=${REBUILD:-false}
export CI=${CI:-false}

# PYBUILD comes from versions at runtime. must be specified at build.
export PYMAJOR=$(echo -n $PYBUILD|cut -d. -f1)
export PYMINOR=$(echo -n $PYBUILD|cut -d. -f2)

export HOST_PREFIX=${HOST_PREFIX:-${SDKROOT}/devices/$(arch)/usr}
export PREFIX=${PREFIX:-${SDKROOT}/devices/emsdk/usr}

mkdir -p ${SDKROOT}/build/pycache ${SDKROOT}/build/cache
export PYTHONPYCACHEPREFIX=${PYTHONPYCACHEPREFIX:-$(realpath ${SDKROOT}/build/pycache)}

export WHEELS=/data/git/archives/repo

export HOME=$(realpath ${SDKROOT})
export XDG_DATA_HOME=${HOME}/build/share
export XDG_CACHE_HOME=${HOME}/build/cache
export XDG_CONFIG_HOME=${HOME}/build/config
export XDG_DATA_DIRS=${HOME}/build/share
mkdir -p $XDG_DATA_HOME $XDG_CACHE_HOME $XDG_CONFIG_HOME

export PIP_ROOT_USER_ACTION=ignore
export PIP_NO_CACHE_DIR=1
export HPY=${HOST_PREFIX}/bin/python${PYBUILD}
export HPIP="${HPY} -mpip"

# base wasm features pure is "mvp" , "bi" is bigint

if [ -f /mvp ]
then
    export WASM_FLAVOUR=mvp
    export WASM_OPTS="-sMIN_SAFARI_VERSION=120000"
    export WASM_PURE=true
else
    export WASM_FLAVOUR=bi

    # extra features. Safari 140100 is expected to have BIGINT ? emsdk warnings ?
    export WASM_OPTS="-sWASM_BIGINT -sMIN_SAFARI_VERSION=150000"

    # tell to not normalize modules.
    export WASM_PURE=false
fi

EXTRABINS="/usr/local/bin /opt/bin"

# ============ emscripten ==============
# stable==latest dev==tot
# EMFLAVOUR comes from versions at runtime.
export EMFLAVOUR=${EMFLAVOUR:latest}
export EMSDK_QUIET=1
export EMSDK_NOTTY=0
export EMSDK_VERBOSE=0

#temp fix for oom on CI (Error: Process completed with exit code 143.)
export EMSDK_NUM_CORES=${EMSDK_NUM_CORES:-1}

# for shared modules
export PYDK_PYTHON_HOST_PLATFORM=wasm32-${WASM_FLAVOUR}-emscripten
export PYDK_SYSCONFIG_PLATFORM=$(echo -n $PYDK_PYTHON_HOST_PLATFORM|cut -d- -f1)-$(echo -n $PYDK_PYTHON_HOST_PLATFORM|cut -d- -f3)

# ============== wasi sdk ===============

# stable
export WASI_SDK=${WASI_SDK:-25.0}
export WASI_SDK_MAJOR=$(echo ${WASI_SDK}|cut -d. -f1)
export WASI_SDK_MINOR=$(echo ${WASI_SDK}|cut -d. -f2)
export WASI_URL=https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_SDK_MAJOR}/wasi-sdk-${WASI_SDK}-$(arch)-linux.tar.gz
export WASISDK="${SDKROOT}/wasisdk"

export WASMTIME_HOME=$WASISDK

# EXTRABINS="$EXTRABINS $WASISDK/bin"

# =============== JDK =======================
export JAVA_HOME=${SDKROOT}/jdk
EXTRABINS="$EXTRABINS ${JAVA_HOME}/bin"

# =============== Nimrod ====================

# tested
NIM_VERSION=nim-2.0.8

# testing
NIM_VERSION=${NIM_VERSION:-nim-2.2.2}

NIM_URL=https://nim-lang.org/download/${NIM_VERSION}-linux_x64.tar.xz

#NIM_VERSION=nim-git
#NIM_URL=https://github.com/nim-lang/Nim

export NIM_VERSION NIM_URL
export NIMSDK=${NIMSDK:-"${SDKROOT}/nimsdk"}

# EXTRABINS="$EXTRABINS $NIMSDK/bin"

# =============== rust ====================
export CARGO_HOME=${CARGO_HOME:-${SDKROOT}}/rust
export RUSTUP_HOME=${RUSTUP_HOME:-${SDKROOT}}/rust
mkdir -p ${CARGO_HOME}/bin
EXTRABINS="$EXTRABINS $CARGO_HOME/bin"

# ================ go =====================
export GOPRIVATE=*
export GONOPROXY=*
export GONOSUMDB=*
export GOMODCACHE=$XDG_CACHE_HOME
export GOPATH=$SDKROOT/go
export GOROOT=$SDKROOT/go

EXTRABINS="$EXTRABINS $GOROOT/bin"

# ============== wasmer  =================
# curl https://get.wasmer.io -sSfL | sh

export WASMER_DIR==/opt/python-wasm-sdk/wasmer


# ================ bun ====================
export BUN_INSTALL=${SDKROOT}/bun

EXTRABINS="$EXTRABINS $BUN_INSTALL/bin"

# ================ aosp ===================

export AOSP_NDK=${AOSP_NDK:-25.2.9519653}
export REACT_NATIVE="react-native@0.77.0"

# ===========     panda3d =================

export PANDA_PRC_DIR=${SDKROOT}/support


PATH=/usr/bin:/bin
for extrabin in $EXTRABINS
do
    if echo $PATH|grep -q ":$extrabin"
    then
        continue
    fi

    if [ -d $extrabin ]
    then
        PATH=$extrabin:$PATH
    fi
done

export SYS_NODE=$(echo -n $SDKROOT/emsdk/node/??.??.*/bin/node)

# this is python used for emsdk : ${SYS_PYTHON} -> ${EMSDK_PYTHON}
# sane default
export SYS_PYTHON=python${PYMAJOR}
for py in 10 9 8
do
    if command -v python${PYMAJOR}.${py} >/dev/null
    then
        export SYS_PYTHON=$(command -v python${PYMAJOR}.${py})
        break
    fi
done

export CLONE="git clone --recursive --no-tags --depth 1 --single-branch --branch"
export LD_LIBRARY_PATH="${HOST_PREFIX}/lib:$LD_LIBRARY_PATH"
export PATH="${HOST_PREFIX}/bin:$PATH"
fi
